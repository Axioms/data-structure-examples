/*
* Class: CS 3305L Section 05
* Term: Spring 2020
* Name: Karan Munday
* Instructor: Deepa Muralidhar
* Assignment: 11
* File Name: bst.template
*/

#include "bst.h"
#include <string>
#include <iostream>
/**
    * Add the item to this binary search tree as long as it
    * is not already present.
    * Return false if item is already  in the tree.
    * Return true if item is actually added to the tree.
    */
template <class T>
bool binary_search_tree<T>::insert(const T &item) {
	binary_tree_node<T> *curr = root; 
	if(root == NULL) {
		root = new binary_tree_node<T>(item);
		return true;
	}
	while(curr != NULL) {
		if(curr->data() == item) {
			return false;
		}
		else if(curr->data() < item) {
			if(curr->right() == NULL) {
				curr->set_right(new binary_tree_node<T>(item));
				return true;
			}
			else {
				curr = curr->right();
			}
		}
		else if(curr->data() > item) {
			if(curr->left() == NULL) {
				curr->set_left(new binary_tree_node<T>(item));
				return true;
			}
			else {
				curr = curr->left();
			}
		}
	}
	return false;
}

/* 
 * the target value removed -> return true
 * if not -> return false
 */
template <class Item>
bool bst_remove(binary_tree_node<Item>*& root_ptr, const Item& target) {
	if(root_ptr == NULL) {
		return false;
	}
	else if(root_ptr->data() != target) {
		if(root_ptr->data() < target) {
			return bst_remove(root_ptr->right(), target);
		}
		else {
			return bst_remove(root_ptr->left(), target);
		}
	}
	else if(root_ptr->data() == target) {
		if(root_ptr->left() == NULL && root_ptr->right() != NULL) {
			binary_tree_node<Item>* old_root = root_ptr;
			root_ptr = root_ptr->right();
			delete old_root;
			return true;
		}
		else if(root_ptr->right() == NULL && root_ptr->left() != NULL) {
			binary_tree_node<Item>* old_root = root_ptr;
			root_ptr = root_ptr->left();
			delete old_root;
			return true;
		}
		else if(root_ptr->left() != NULL && root_ptr->right() != NULL) {
			binary_tree_node<Item>* new_root = root_ptr;
			bst_remove_max(new_root->left(), root_ptr->data());
			return true;
		}
		else if(root_ptr->left() == NULL && root_ptr->right() == NULL) {
			root_ptr = NULL;
			return true;
		}
		return false;
	}
	return false;
}

template <class Item>
void bst_remove_max(binary_tree_node<Item>*& root_ptr, Item& removed) {
	if(root_ptr->right() == NULL) {
		binary_tree_node<Item>* root_node = root_ptr;
		removed = root_ptr->data();
		root_ptr = root_ptr->left();
		delete root_node;
	}
	else {
		bst_remove_max(root_ptr->right(), removed);
	}
}

template <class T>
bool binary_search_tree<T>::remove(const T &item) {
    return bst_remove(root, item);
}




template <class T>
binary_tree_node<T> *binary_search_tree<T>::search(const T &key) const {
    binary_tree_node<T> *p = root;
    while(p != NULL && p->data() != key) {
        if(key < p->data())
            p = p->left();
        else
            p = p->right();
    }
}


template <class T>
binary_search_tree<T>::~binary_search_tree() {
    tree_clear(root);
}



/**
 * return the depth of the tree if the tree is balanced.
 * Return -2 if not. Return -1 if it is an empty tree.
 */
template <class T>
int check_balanced(binary_tree_node<T> *root) {
    if(root == NULL)
        return  -1;
    else {
        int ibl = check_balanced(root->left());
        if(ibl == -2)
            return -2;
        int ibr = check_balanced(root->right());
        if(ibr == -2)
            return -2;
        if(abs(ibr-ibl) > 1)
            return -2;
        if(ibr > ibl)
            return ibr+1;
        else
            return  ibl+1;
    }
}


/**
    * return the depth of the tree if the tree is balanced.
    * Return -2 if not.
    */
template <class T>
int  binary_search_tree<T>::is_balanced() {
    return check_balanced(root);
}

template <class T>
std::ostream &operator<<(std::ostream &out, const binary_tree_node<T> *root) {
    if(root != NULL) {
        out << "[";
        out << root->left() << " ";
        out << root->data();
        out << " " << root->right();
        out << "]";
    }
    return out;
}



template <class T>
std::ostream &operator<<(std::ostream &out, const binary_search_tree<T> &tree) {
    out << tree.root;
    return out;
}




